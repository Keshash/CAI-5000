<#@ template language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#
    var docPath = "$(SolutionDir)/../../../1.4/Languages/English/Keyed/Translations.xml";
    var doc = new XmlDocument();
    doc.Load(docPath);
#>
using Verse;

namespace CombatAI.R
{    

    // Auto generated file!
    // -------------------------------------------------
    // This file is auto generated! Mod path is:
    // <#= docPath #>
    // -------------------------------------------------
    /// <summary> 
    /// <para>Keyed string database. This Class is generated automatically by a T4 template <c>Core/Assets/Keyed.tt</c></para> 
    /// <description>
    /// <para>This class contains all keyed translation nodes along with their text content.</para> 
    /// </description>  
    /// <example>  
    /// This is an example for a node in <c>Translations.xml</c> called <c>A.RimWorld.Translation.Node</c>
    /// <code>    
    /// public static string A_RimWorld_Translation_Node => "A.RimWorld.Translation.Node".Translate();    
    /// </code>        
    /// </example>    
    /// </summary>
    public static class Keyed 
    {     
<#
    foreach (XmlNode node in doc.DocumentElement.ChildNodes)
    {
        if (node.NodeType == XmlNodeType.Element)
        {
            var name = node.Name.Replace('.', '_');
            var key = node.Name;
#>
                      
        private static TaggedString _<#= name #> = null;
        /// <summary> Keyed string. key=<c><#= node.Name #></c>. inner text:
        ///
        /// <code><#= node.InnerText #></code>
        /// </summary>       
        public static TaggedString <#= name #> {
            get => _<#= name #> != null ? 
                   _<#= name #> : _<#= name #> = "<#= key #>".Translate();
        }             
<#
        }
    }
#>
    }
}